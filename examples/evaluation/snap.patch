diff --git a/ports/snap-c/Makefile b/ports/snap-c/Makefile
index 0881e9e..a6046a1 100644
--- a/ports/snap-c/Makefile
+++ b/ports/snap-c/Makefile
@@ -2,29 +2,30 @@ A_PREFIX=snap
 A_SUFFIX=_mkl_vml
 A_TARGET=$(A_PREFIX)$(A_SUFFIX)
 
-CC=mpiicc			# C compiler command
-CFLAGS=-mkl -O3 -xAVX -std=c99 -fopenmp -parallel -DUSEMKL -DUSEVML	# C compiler flags
-#CC=mpicc
-#CFLAGS=-O3 -std=c99 -fopenmp -lm #-wall	# C compiler flags
-LDFLAGS=			# Linker flags, e.g. -L<lib dir> if you have libraries in a nonstandard directory <lib dir>
+# CC=mpiicc			# C compiler command
+# CFLAGS=-mkl -O3 -xAVX -std=c99 -fopenmp -parallel -DUSEMKL -DUSEVML	# C compiler flags
+CC=mpicc
+CFLAGS=-O3 -std=c99 -fopenmp -lm #-wall	# C compiler flags
+LDFLAGS=-Wl,--copy-dt-needed-entries			# Linker flags, e.g. -L<lib dir> if you have libraries in a nonstandard directory <lib dir>
 LIBS=				# Libraries to pass to the linker, e.g. -l<library>
 CPPFLAGS=			# (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if you have headers in a nonstandard directory <include dir>
-CXX=icc				# C++ compiler command
+CXX=gcc				# C++ compiler command
 CXXFLAGS=-O3 -std=c++11 -openmp	# C++ compiler flags
 CXXCPP=				# C++ preprocessor flags
 
-A_FILES := $(wildcard *.cpp) $(wildcard *.c)
-A_OBJS := $(sort $(patsubst %.c, %.o, $(patsubst %.cpp, %.o, $(A_FILES))))
 
 INPUT_FILE=scale_test_8_4.inp
 OUTPUT_PREFIX=snap_test
 OUTPUT_SUFFIX=.out
 OUTPUT_FILE=$(OUTPUT_PREFIX)$(OUTPUT_SUFFIX)
 
+DIM1_SWEEP_C=dim1_sweep.c
+DIM3_SWEEP_C=dim3_sweep.c
 SRCS = snap.h snap_main.c utils.c version.c plib.c geom.c \
        sn.c data.c control.c input.c setup.c dealloc.c \
        translv.c solvar.c outer.c expxs.c inner.c sweep.c \
-       octsweep.c dim1_sweep.c dim3_sweep.c output.c time.c mms.c
+       octsweep.c ${DIM1_SWEEP_C} ${DIM3_SWEEP_C} output.c time.c mms.c
+A_OBJS := $(sort $(patsubst %.c, %.o, $(patsubst %.cpp, %.o, $(SRCS))))
 
 
 all: $(A_TARGET) 			# Build all targets
diff --git a/ports/snap-c/dim1_sweep.c b/ports/snap-c/dim1_sweep.c
index e72a5a2..1c3b487 100644
--- a/ports/snap-c/dim1_sweep.c
+++ b/ports/snap-c/dim1_sweep.c
@@ -73,11 +73,36 @@ void dim1_sweep ( input_data *input_vars, geom_data *geom_vars,
 
     double psi[NANG], pc[NANG], den[NANG];
 
+    double *data_vars___qim = data_vars->qim;
+    int sn_vars___noct = sn_vars->noct;
+    int input_vars___nz = input_vars->nz;
+    int input_vars___ny = input_vars->ny;
+    int input_vars___nx = input_vars->nx;
+    int input_vars___nang = input_vars->nang;
+    int input_vars___src_opt = input_vars->src_opt;
+    double *solvar_vars___psii = solvar_vars->psii;
+    double *solvar_vars___qtot = solvar_vars->qtot;
+    int sn_vars___cmom = sn_vars->cmom;
+    double *sn_vars___ec = sn_vars->ec;
+    double *sn_vars___mu = sn_vars->mu;
+    double geom_vars___hi = geom_vars->hi;
+    double *data_vars___vdelt = data_vars->vdelt;
+    double *solvar_vars___ptr_in = solvar_vars->ptr_in;
+    int input_vars___fixup = input_vars->fixup;
+    double *geom_vars___dinv = geom_vars->dinv;
+    double *solvar_vars___ptr_out = solvar_vars->ptr_out;
+    double *solvar_vars___t_xs = solvar_vars->t_xs;
+    double control_vars___tolr = control_vars->tolr;
+    double *sn_vars___w = sn_vars->w;
+    double *solvar_vars___flux = solvar_vars->flux;
+    double *solvar_vars___fluxm = solvar_vars->fluxm;
+    int NANG_x_NX = NANG * NX;
+    int cond1 = data_vars___vdelt[g-1];
     for ( ang = 0; ang < NANG; ang++ )
     {
-        psi[NANG] = 0;
-        pc[NANG]  = 0;
-        den[NANG] = 0;
+        psi[ang] = 0;
+        pc[ang]  = 0;
+        den[ang] = 0;
     }
 
     double hv[NANG*2], fxhv[NANG*2], qm[NANG*NX];
@@ -88,7 +113,7 @@ void dim1_sweep ( input_data *input_vars, geom_data *geom_vars,
         fxhv[ang] = 0;
     }
 
-    for ( ang = 0; ang < (NANG*NX); ang++ )
+    for ( ang = 0; ang < (NANG_x_NX); ang++ )
     {
         den[ang] = 0;
     }
@@ -318,6 +343,7 @@ A
 /***********************************************************************
  * Compute the flux moments
  ***********************************************************************/
+    #pragma scop
         sum_wpsi = 0;
         for ( ang = 0; ang < NANG; ang++ )
         {
@@ -337,6 +363,7 @@ A
             FLUXM_2D((l-1),(i-1)) += sum_ecwpsi;
 
         }
+    #pragma endscop
 
 /***********************************************************************
  * Calculate min and max scalar fluxes (not used elsewhere currently)
diff --git a/ports/snap-c/dim3_sweep.c b/ports/snap-c/dim3_sweep.c
index 7175b3a..157c884 100644
--- a/ports/snap-c/dim3_sweep.c
+++ b/ports/snap-c/dim3_sweep.c
@@ -67,6 +67,8 @@ void dim3_sweep ( input_data *input_vars, para_data *para_vars,
 /***********************************************************************
  * Local variables
  ***********************************************************************/
+  #undef NANG
+  int NANG = input_vars->nang;
     int ist, d, n, ic, i, j, k, l, ibl, ibr, ibb, ibt, ibf, ibk;
 
     int z_ind, y_ind, ic_ind, ang, indx1 = 4;
@@ -81,6 +83,7 @@ void dim3_sweep ( input_data *input_vars, para_data *para_vars,
         mu_hv[NANG], hj_hv[NANG], hk_hv[NANG], w_psi[NANG];
 
     double unit_vec[indx1];
+  #pragma scop
     for ( i = 0; i < indx1; i++ )
     {
         unit_vec[i] = 1;
@@ -133,7 +136,7 @@ void dim3_sweep ( input_data *input_vars, para_data *para_vars,
             FXHV_2D(ang, i) = 0;
         }
     }
-
+    #pragma endscop
 /***********************************************************************
  * Loop over cells along the diagonals. When only 1 diagonal, it's
  * normal sweep order. Otherwise, nested threading performs mini-KBA.
